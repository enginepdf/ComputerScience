// reference : https://smartits.tistory.com/209
// https://www.digicert.com/kr/what-is-ssl-tls-https/
// https://asfirstalways.tistory.com/356
// https://ko.wikipedia.org/wiki/HTTP
// https://github.com/JaeYeopHan/Interview_Question_for_Beginner/tree/master/Network
// https://wayhome25.github.io/cs/2018/03/11/ssl-https/

HTTP(HyperText Transfer Protocol) : 클라이언트와 서버 사이에 이루어지는 요청/응답 프로토콜
                                    평문 통신이라 도청 가능, 통신 상대 확인하지 않아 위장 가능, 완전성 증명할 수 없어 변조 가능
                                    통신 자체를 암호화 SSL, TLS라는 다른 프로토콜을 조합함으로써 HTTP의 통신 내용을 암호화 가능

SSL(Secure Socket Layers) : SSL은 웹사이트와 브라우저(혹은, 두 서버) 사이에 전송된 데이터를 암호화하여 인터넷 연결을 보안을 유지하는 표준 기술
                            안전한 의사소통 채널을 수립할 때는 공개키 암호를 사용, 이 채널을 통해 임시의 무작위 대칭키를 생성 및 교환. 해당 대칭키는 나머지 암호화에 활용
                            컴퓨터 간의 통신(핸드쉐이크 -> 세션 -> 세션 종료), 암호화된 HTTP 메시지 교환 전에 클라이언트와 서버는 SSL 핸드쉐이크 진행(프로토콜 버전 번호 교환, 양쪽이 알고 있는 pre master secret 키 생성 및 교환, 양쪽의 신원 인증, 채널 암호화 하기 위한 임시 세션 키 생성)

TLS(Transport Layer Security) : TLS는 가장 최신 기술로 더 강력한 버전의 SSL(세션 키를 만들 때, 교환하고자 할 때 공개키 암호화 방식 사용)
                                TLS의 3단계 기본 절차
                                    지원 가능한 알고리즘 서로 교환
                                    키 교환, 인증
                                    대칭키 암호로 암호화하고 메시지 인증

                                TLS is a cryptographic protocol that provides end-to-end security of data sent between applications over the Internet. 
                                It is mostly familiar to users through its use in secure web browsing, and in particular the padlock icon that appears in web browsers when a secure session is established. 
                                However, it can and indeed should also be used for other applications such as e-mail, file transfers, video/audioconferencing, instant messaging and voice-over-IP, as well as Internet services such as DNS and NTP

                                TLS is normally implemented on top of TCP in order to encrypt Application Layer protocols such as HTTP, FTP, SMTP and IMAP, 
                                although it can also be implemented on UDP, DCCP and SCTP as well (e.g. for VPN and SIP-based application uses). 
                                This is known as Datagram Transport Layer Security (DTLS) and is specified in RFCs 6347, 5238 and 6083

                                TLS uses a combination of symmetric and asymmetric cryptography, as this provides a good compromise between performance and security when transmitting data securely.

                                With symmetric cryptography, data is encrypted and decrypted with a secret key known to both sender and recipient; 
                                typically 128 but preferably 256 bits in length (anything less than 80 bits is now considered insecure). 
                                Symmetric cryptography is efficient in terms of computation, but having a common secret key means it needs to be shared in a secure manner.

                                Asymmetric cryptography uses key pairs – a public key, and a private key. The public key is mathematically related to the private key, but given sufficient key length, it is computationally impractical to derive the private key from the public key. 
                                This allows the public key of the recipient to be used by the sender to encrypt the data they wish to send to them, but that data can only be decrypted with the private key of the recipient.

                                The advantage of asymmetric cryptography is that the process of sharing encryption keys does not have to be secure, 
                                but the mathematical relationship between public and private keys means that much larger key sizes are required. 
                                The recommended minimum key length is 1024 bits, with 2048 bits preferred, but this is up to a thousand times more computationally intensive than symmetric keys of equivalent strength 
                                (e.g. a 2048-bit asymmetric key is approximately equivalent to a 112-bit symmetric key) 
                                and makes asymmetric encryption too slow for many purposes.

                                For this reason, TLS uses asymmetric cryptography for securely generating and exchanging a session key. 
                                The session key is then used for encrypting the data transmitted by one party, and for decrypting the data received at the other end. Once the session is over, the session key is discarded.

HTTPS(Hyper Text Protocol Secure) :  HTTPS는 웹사이트를 SSL/TLS 인증서로 보안하는 경우 URL 창에 표시, SSL을 조합한 HTTP를 HTTPS(HTTP Secure) or HTTP over SSL이라고 부름.
                                     HTTP 통신하는 소켓 부분을 SSL, TLS라는 프로토콜로 대체
                                     HTTP는 원래 TCP와 직접 통신, HTTPS에서 HTTP는 SSL과 통신하고 SSL이 TCP와 통신.
                                     HTTPS의 SSL에서는 공통키(대칭키) 암호화 방식과 공개키 암호화 방식을 혼합한 하이브리드 암호 시스템 사용.
                                     공통키를 공개키 암호화 방식으로 교환한 다음부터의 통신은 공통키 암호를 사용하는 방식
                                     통신할 때마다 암호화를 하면 많은 리소스를 사용하여 서버 한 대당 처리할 수 있는 리퀘스트의 수가 줄어듬
                                    

SSL 디지털 인증서 : 클라이언트와 서버간의 통신을 공인된 제3자(CA, Certificate Authority) 업체가 보증해주는 전자화된 문서
                 SSL 통신에 사용할 공개키를 클라이언트에게 제공
                 인증서의 내용(서비스 정보 - 인증서 발급자, CA의 디지털 서명, 서비스 도메인, 서버측 공개키은 CA의 비공개 키를 이용해서 암호화 되어 웹 브라우저에게 제공)
                 
                    웹 브라우저가 서버에 접속 시 서버는 제일 먼저 인증서 제공
                    브라우저는 인증서를 발급한 CA가 자신이 갖고 있는 CA 리스트에 있는지 확인
                    리스트에 있다면 해당 CA의 공개키를 이용해서 인증서 복호화(CA의 비공개키에 의해 암호화 된 것을 의미 --> 데이터 제공한 사람의 신원 보장)


대칭키 암호화 방식 : 인코딩과 디코딩에 같은 키를 사용하는 알고리즘
                 대칭키 전달 과정에서 키가 유출 되면  암호의 내용을 복호화할 수 있어 위험 -> 공개키 암호화 방식 사용

공개키 암호화 방식 : 인코딩과 디코딩에 다른 키 사용하는 알고리즘     
                A키로 암호화 시 B키로 복호화 가능, B키로 암호화 하면 A키로 복호화
                인코딩 키(public key)는 공개. 보통 디지털 인증서 안에 포함
                디코딩 키(secret key)는 호스트만이 가짐
                공개키와 비공개키의 분리는 메시지의 인코딩은 누구나 할 수 있도록 해주는 동시에, 메시지의 디코딩은 비밀키 소유자에게만 부여
                클라이언트가 서버로 안전하게 메시지 발송하는 것을 쉽게 해줌. 공개키 암호화 방식의 알고리즘은 계산이 느린 경향
                공개키와 비공키는 안전한 데이터 전달 이외에도, 데이터 제공자의 신원 보장에 사용 가능
                비공개키의 소유자가 비공개 키를 이용해서 정보를 암호화 -> 공개키와 함께 암호화된 정보를 전송 -> 수신자는 공개키로 암호화된 정보 복호화(공개키와 쌍을 이루는 비공개키에 의해 암호화 되었다는 것을 의미) -> 공개키가 데이터를 제공한 사람의 신원을 보장해주게 되는 것(전자 서명)
